# -*- coding: utf-8 -*-
"""OOP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v8i4YrwL9OiYWYhUD85p4RN-JRkVn-8M
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from xgboost import XGBClassifier
import numpy as np
import pickle as pkl


import warnings
warnings.filterwarnings('ignore')

class DataHandler:
  def __init__(self, file_path):
    self.file_path = file_path
    self.data = None
    self.input_df = None
    self.output_df = None

  def load_data(self):
    self.data = pd.read_csv(self.file_path)

  def drop_missing(self):
    self.data.dropna(inplace=True)

  def create_input_output(self, target_column):
    self.output_df = self.data[target_column]
    self.input_df = self.data.drop(target_column, axis=1)

  def info_data(self):
    print(self.data.isna().sum())

import pandas as pd
from xgboost import XGBClassifier
from sklearn.metrics import classification_report, accuracy_score
from sklearn.model_selection import train_test_split
import pickle

class ModelHandler:
    def __init__(self, input_data, output_data):
        self.input_data = input_data
        self.output_data = output_data
        self.model = None
        self.x_train, self.x_test, self.y_train, self.y_test, self.y_predict = [None] * 5

    def drop(self, target_column):
        self.input_data = self.input_data.drop(target_column, axis=1)

    def info(self):
      print(self.input_data.info())

    def createModel(self):
        self.model = XGBClassifier(n_estimators=150,max_depth=7,learning_rate=0.1,gamma=0.4, colsample_bytree=0.8)

    def checkAgeOutlierWithBox(self, columns):
        boxplot = self.x_train.boxplot(column=[columns])
        plt.show()

    def createOneHotEncoding(self,columns):
        encode = OneHotEncoder()
        train_data = self.x_train[columns]
        train_encode= pd.DataFrame(encode.fit_transform(train_data).toarray(), columns=encode.get_feature_names_out())
        self.x_train = self.x_train.reset_index(drop=True)
        self.x_train = pd.concat([self.x_train, train_encode],axis=1)

        test_data = self.x_test[columns]
        test_encode= pd.DataFrame(encode.fit_transform(test_data).toarray(), columns=encode.get_feature_names_out())
        self.x_test = self.x_test.reset_index(drop=True)
        self.x_test = pd.concat([self.x_test, test_encode],axis=1)

        self.x_train.drop(columns, axis=1, inplace=True)
        self.x_test.drop(columns, axis=1, inplace=True)

    def Prediction(self):
        self.y_predict = self.model.predict(self.x_test)

    def Report(self):
        print("\nClassification Report\n")
        print(classification_report(self.y_test, self.y_predict, target_names=['0', '1']))

    def split_data(self, test_size=0.2, random_state=42):
        self.x_train, self.x_test, self.y_train, self.y_test = train_test_split(self.input_data, self.output_data, test_size=test_size, random_state=random_state)

    def Train_Model(self):
        self.model.fit(self.x_train, self.y_train)

    def Evaluate_Model(self):
        predictions = self.model.predict(self.x_test)
        return accuracy_score(self.y_test, predictions)

    def Save(self, filename):
        filename='XGBOOST.pkl'
        pkl.dump(self.model,open(filename,'wb'))

#load data and preprocessing
file_path = 'data_A.csv'
data_handler = DataHandler(file_path)
data_handler.load_data()
data_handler.create_input_output('churn')
data_handler.drop_missing()
data_handler.info_data()

input_df = data_handler.input_df
output_df = data_handler.output_df
model_handler = ModelHandler(input_df,output_df)
model_handler.drop(['id','Surname','Unnamed: 0', 'CustomerId'])
model_handler.split_data()
model_handler.createOneHotEncoding(['Gender','Geography'])
model_handler.createModel()

model_handler.Train_Model()
print("Accuracy:", model_handler.Evaluate_Model())

model_handler.Prediction()
model_handler.Report()

model_handler.Save('XGBOOST.pkl')